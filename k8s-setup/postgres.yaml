apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: flyte
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: standard
  resources:
    requests:
      storage: 10Gi

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: flyte
  labels:
    app.kubernetes.io/name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
    spec:
      containers:
        - image: "postgres:alpine3.19"
          imagePullPolicy: "IfNotPresent"
          name: postgres
          env:
            - name: POSTGRES_PASSWORD
              value: flyte #Change it to a different value if needed
            - name: POSTGRES_USER
              value: flyte
            - name: POSTGRES_DB
              value: flyte
            - name: PGDATA
              # Make sure that pgdata is not the same as mount point or we get an
              # error "exists but is not empty." So use a subdir within mount point
              value: /var/lib/postgresql/data/pgdata
          ports:
            - containerPort: 5432
              name: postgres
          resources:
            limits:
              cpu: 250m
              memory: 512Mi
            requests:
              cpu: 50m
              memory: 128Mi
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/data
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: postgres-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: flyte
  labels:
    app.kubernetes.io/name: postgres
spec:
  type: NodePort
  ports:
    - name: postgres
      port: 5432
      nodePort: 30089
      protocol: TCP
      targetPort: postgres
  selector:
    app.kubernetes.io/name: postgres
